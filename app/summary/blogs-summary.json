{"/blogs/farmfe-plugins-ci":"The blog introduces farm plugins CI for JavaScript and Rust plugins. For Rust plugins, it builds for multiple platforms and deploys to npm registry. For JavaScript plugins, similar steps are followed. Both use pnpm --filter '{xx}[HEAD~1]' to build only changed plugins and contains to determine if CI should run. The summary emphasizes these two points for reducing build time and controlling CI execution.","/rusts/start":"**Blog Summary**\n\nThe blog post is about getting started with the Rust programming language. The author, Madinah, provides a simple example of a \"hello, world\" program in Rust.\n\nIn this example, the `main` function is defined, which contains the `println!` macro that prints \"Hello, world!\" to the console.\n\nThis post is likely intended for beginners who want to learn how to write their first Rust program. The simplicity of the code makes it accessible to those new to programming languages.\n\nThe author's goal appears to be introducing readers to the basics of Rust and encouraging them to try out the language themselves. Overall, this post provides a concise introduction to getting started with Rust.","/rusts/async":"博客介绍了 Rust 异步编程。解释了 trait 的概念，阐述了进程 — 线程 — 协程的异步模型。讲解了 async/await 的用法及 async lifetime。详细说明了 Future trait 及其 Poll 枚举类型。还涉及了异步调试工具如 tokio-tracing、tokio-console、await-tree 以及 openharmony 的 yinglong 框架及其特定需求。最后给出了一篇关于 reactor 模式的文章链接。","/rusts/algorithm":"The provided Rust algorithm solves","/blogs/algorithm":"Here is a summary of the content in one sentence:\n\nTwo Rust algorithms are provided: one to find the unique number on a card given that all other numbers appear twice, and another to count the different combinations of digit groups from 1-9 that sum up to an even number.","/blogs/start":"This code is a simple \"Hello, world!\" program written in Rust programming language, using the `println!` macro to print a message to the console.","/blogs/async":"异步编程在Rust中是使用Future和Async/Await来实现的。Future表示一个异步计算，或者说会在未来完成计算的操作。Async/Await是一种语法糖，使得我们可以写出 synchronous 代码，但实际上是在异步中执行。 \n\nFuture trait定义了poll方法，当调用poll方法时会返回一个枚举类型的值：Poll::Pending表示这个Future还没计算完成，Poll::Ready(val)表示这个Future计算完毕，并附带计算结果val。\n\n在Rust中，使用tokio作为async/await的runtime。tokio是一个异步I/O框架，它支持多种类型的IO操作，包括TCP、UDP、HTTP等。 \n\nRust中的异步编程有许多优点，包括：\n\n*   可以同时执行多个任务，这可以显著提高程序的性能\n*   不需要使用线程或进程来管理异步任务，这可以减少系统资源的消耗\n*   支持调试和调优工具，如waiter和async-tracing\n\nRust中的异步编程也有许多缺点，包括：\n\n*   可以增加复杂性，因为我们需要了解Future、Async/Await和tokio等概念\n*   不支持全栈异步，部分栈异步的使用需要额外的工具和设置","/blogs/clear-code":"The author of the \"Clean Code\" article shares their thoughts on coding best practices, including keeping code clean and organized, using descriptive names that match the context, and choosing names that are both meaningful and easy to read."}